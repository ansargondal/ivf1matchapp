$(function () {

    $('[data-toggle="tooltip"]').tooltip();

    //region Global Variables
    var $replyMessageModal = $('#modal-reply-message');
    var $viewMessageModal = $('#modal-view-message');
    var $messageModal = $('#message-modal');
    var $body = $('body');
    //endregion

    //update  recipient status logic
    $body.on('click', '.table .dropdown .dropdown-menu a', function () {

        var btn = $(this).closest('.dropdown').find('.btn');

        var status = $.trim($(this).text());

        btn.removeClass('dropdown-toggle').addClass('dropdown-loading');

        $.ajax({
            url: btn.data('url'),
            type: 'post',
            data: {status: status},
            dataType: "json",
            success: function (response) {

                if (!response.error) {
                    notify(response.message, response.title);

                    btn.removeClass('dropdown-loading').addClass('dropdown-toggle');
                    btn.text(status).removeClass('btn-danger btn-success btn-warning');

                    updateBtnStatus(btn, status);
                }
            },
            error: function (response) {

            },
            complete: function () {

            }
        });
    });

    var queryParameters = getUrlVars();

    var filter = queryParameters['filter'];

    var url = '/admin/messagesAjax?filter=';

    //if no query parameters are set getUrlVars returns a function
    //If it returns a function means filter is not present in query string
    url = (isFunction(filter)) ? url : url + filter;

    var table = $('#data-table').DataTable({

        buttons: ['copy', 'excel', 'pdf'],
        responsive: true,
        processing: true,
        serverSide: true,
        'ajax': url,
        'columns': [
            {'data': 'id', name: 'id', className: 'id'},
            {'data': 'sender_id', name: 'sender-id', className: 'sender-id d-none'},
            {'data': 'from', name: 'from'},
            {'data': 'to', name: 'to'},
            {'data': 'subject', name: 'subject'},
            {'data': 'message', name: 'message'},
            {'data': 'created_at', name: 'date'},
            {'data': 'status', name: 'status'},
            {'data': 'action', name: 'action'},
        ],
        "language": {
            processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only"></span>',
            paginate: {
                'previous': '<i class="fa fa-angle-double-left"></i>',
                'next': '<i class="fa fa-angle-double-right"></i>'
            }
        },
    });


    //who sends the message
    var sender_id = '';

    //region Show View Message Modal And Update It's status from unread to read
    $body.on('click', '.js-btn-read', function (evt) {
        evt.preventDefault();

        var clickedBtn = $(this);
        $tr = $(this).closest('tr');
        var id = parseInt($tr.find('.id').text());

        //parsing row to get sender id & assigning it to a variable
        sender_id = parseInt($tr.find('.sender-id').text());

        hide_tooltip($(this));

        $.get('/admin/messages/' + id, function (response) {
            $viewMessageModal.find('[name=name]').val(response[0].sender.fname + ' ' + response[0].sender.lname);
            $viewMessageModal.find('[name=email]').val(response[0].sender.email);
            $viewMessageModal.find('[name=subject]').val(response[0].subject);
            $viewMessageModal.find('[name=message]').val(response[0].message);

            //if message is unread then mark it as read
            if (clickedBtn.closest('tr').hasClass('unread')) {

                //persist the message read status
                $.post('/admin/messages/' + id + '/mark-as-read');
            }
        }).done(function () {

            //add focus to non empty fields
            addFocusOnOpenModal($viewMessageModal);

            //update bg status on read
            clickedBtn.closest('tr').removeClass('unread').addClass('read');

            //change envelop icon on read
            var $envelopIcon = clickedBtn.find('.fa');
            $envelopIcon.removeClass('.fa-envelope').addClass('fa-envelope-open');

            $viewMessageModal.modal('show');
        });
    });
    //endregion

    //region Direct Reply
    $body.on('click', '.js-btn-reply', function (evt) {
        evt.preventDefault();

        $tr = $(this).closest('tr');
        var id = parseInt($tr.find('.id').text());

        //parsing row to get sender id & assigning it to a variable
        sender_id = parseInt($tr.find('.sender-id').text());

        hide_tooltip($(this));

        $.get('/admin/messages/' + id, function (response) {

            $replyMessageModal.find('[name=name]').val(response[0].sender.fname + ' ' + response[0].sender.lname);
            $replyMessageModal.find('[name=email]').val(response[0].sender.email);
            $replyMessageModal.find('[name=subject]').val(response[0].subject);

        }).done(function () {

            //add focus to non empty fields
            addFocusOnOpenModal($replyMessageModal);

            $replyMessageModal.modal({
                keyboard: false,
                backdrop: 'static'
            });
        });

    });
    //endregion

    //region Reply From View Modal
    $body.on('click', '.js-view-btn-reply', function (evt) {
        evt.preventDefault();

        var name = $viewMessageModal.find('[name=name]').val();
        var email = $viewMessageModal.find('[name=email]').val();
        var subject = $viewMessageModal.find('[name=subject]').val();

        $viewMessageModal.modal('hide');

        $replyMessageModal.find('[name=email]').val(email);
        $replyMessageModal.find('[name=name]').val(name);
        $replyMessageModal.find('[name=subject]').val(subject);
        $replyMessageModal.find('[name=message]').focus();
        $replyMessageModal.modal({
            keyboard: false,
            backdrop: 'static'
        });

        //add focus to non empty fields
        addFocusOnOpenModal($replyMessageModal);
    });
    //endregion

    var formReplyMessage = $('#form-reply-message');
    var btn = '';

    $body.on('click', '.js-btn-reply-message', function (evt) {
        evt.preventDefault();

        //sender will become receiver, when replying to a message
        formReplyMessage.find('[name=receiver_id]').val(sender_id);

        btn = $(this);

        formReplyMessage.validate({
            rules: {
                subject: {
                    required: true
                },
                message: {
                    required: true
                }
            }
        });


        //if validation fails stop form submission
        var isValid = $(this).valid();

        if (!isValid) {
            return 0;
        }

        formReplyMessage.submit();

    });

    //contact donor message form
    formReplyMessage.submit(function (evt) {
        evt.preventDefault();

        var form = $(this);
        var btn = $(this).find('.js-btn-reply-message');


        // //if validation fails stop form submission
        // var isValid = $(this).valid();
        // if (!isValid) {
        //     return 0;
        // }


        showSpiner(btn);

        $.ajax({
            url: form.attr('action'),
            type: form.attr('method'),
            data: form.serialize(),
            dataType: "json",
            success: function (response) {

                //reset form data
                form[0].reset();

                if (!response.error) {

                    $('#modal-reply-message').modal('hide');
                    $('#modal-message-sent').modal('show');
                }
            },
            error: function (response) {

            },
            complete: function () {
                hideSpinner(btn, 'Reply');
            }
        });
    });

});


//delete form submission logic
$body.on('click', 'form #js-btn-delete', function (evt) {
    evt.preventDefault();

    //delete the row from database as well as from table
    destroy(table);
});


function updateBtnStatus(btn, status) {

    btn.removeClass('btn-info btn-success');

    switch (status.toLowerCase()) {
        case 'pending':
            btn.addClass('btn-info');
            break;
        case 'approved':
            btn.addClass('btn-success');
            break;
        case 'rejected':
            btn.addClass(' ');
            break;
        default:
            break;
    }
}


