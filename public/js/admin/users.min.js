$(function () {

    $body = $('body');

    //Datatable basic implementation
    var table = $('#data-table').DataTable({

        buttons: ['copy', 'excel', 'pdf'],
        responsive: true,
        processing: true,
        serverSide: true,
        'ajax': '/admin/usersAjax',
        'columns': [
            {'data': 'id', name: 'id'},
            {'data': 'fname', name: 'fname'},
            {'data': 'lname', name: 'lname'},
            {'data': 'email', name: 'email'},
            {'data': 'role', name: 'role'},
            {'data': 'created_at', name: 'added_on'},
            {'data': 'actions', name: 'actions'},
        ],
        "language": {
            processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i><span class="sr-only"></span>',
            paginate: {
                'previous': '<i class="fa fa-angle-double-left"></i>',
                'next': '<i class="fa fa-angle-double-right"></i>'
            }
        },
    });

    $('#form-new-user, #form-edit-user').validate({
        rules: {
            fname: {
                required: true,
                minlength: 2
            },
            lname: {
                required: true,
                minlength: 2
            },
            email: {
                required: true,
                email: true
            },
            role: {
                required: true,
            },
            password: {
                required: true,
                minlength: 8
            },
            confirm_password: {
                equalTo: '#password'
            }
        },
        messages: {
            fname: {
                required: "first name is required",
                minlength: "first name must have 2 at least characters."
            },
            lastname: {
                required: "last name is required",
                minlength: "last name must have 2 at least characters."
            },
            email: "enter a valid email address",
            role: 'user role is required',
            confirm_password: 'password doesn\'t match'
        },
    });


    //new users form
    $('#form-new-user').submit(function (evt) {
        evt.preventDefault();

        var form = $(this);
        var btn = $(this).find('.btn-submit');
        var dt = table;

        //if validation fails stop form submission
        var isValid = $(this).valid();
        if (!isValid) {
            return 0;
        }

        showSpiner(btn);

        $.ajax({
            url: form.attr('action'),
            type: form.attr('method'),
            data: form.serialize(),
            dataType: "json",
            success: function (response) {

                //reset form data
                form[0].reset();

                if (!response.error) {
                    notify(response.message, response.title);

                    dt.draw();

                    $('#modal-new-user').modal('hide');
                }
            },
            error: function (response) {

            },
            complete: function () {
                hideSpinner(btn, 'Save');
            }
        });
    });


    //Data table edit link click (show form and populate data
    var userEditModal = $('#modal-edit-user');
    var updatePath = '';
    var row = '';

    $body.on('click', '.js-btn-edit', function (evt) {
        evt.preventDefault();

        updatePath = $(this).attr('href');   // route('tasks.update') path
        var editPath = updatePath + '/edit';           // faking  route('tasks.edit');

        row = $(this).parents('tr');

        $.ajax({
            url: editPath,
            type: 'get',
            dataType: 'json',
            success: function (response) {
                userEditModal.modal({
                    show: true,
                    keyboard: false,
                    backdrop: 'static'
                });

                userEditModal.find('[name=id]').val(response.id);
                userEditModal.find('[name=fname]').val(response[0].fname);
                userEditModal.find('[name=lname]').val(response[0].lname);
                userEditModal.find('[name=email]').val(response[0].email);
                userEditModal.find('[name=role]').val(response[0].roles[0].name);

                addFocusOnOpenModal(userEditModal);
            },
            complete: function () {
            }
        });
    });


    $('button#js-btn-update').click(function (evt) {
        evt.preventDefault();

        var form = $('#form-update-user');
        var btn = $(this);

        var data = form.serializeArray();
        data.push({name: '_method', value: 'patch'}); //add patch

        showSpiner(btn);

        $.ajax({
            url: updatePath,
            type: 'post',
            data: data,
            dataType: 'json',

            success: function (response) {

                if (!response.error) {

                    notify(response.message, response.title);

                    table.draw();

                    userEditModal.modal('hide');
                }
            },
            complete: function () {
                hideSpinner(btn, 'UPDATE');
            }
        });
    });


    //delete form submission logic
    $body.on('click', 'form #js-btn-delete', function (evt) {
        evt.preventDefault();

        //delete the row from database as well as from table
        destroy(table);
    });
});

